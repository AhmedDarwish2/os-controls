#pragma once

#include "Leap/GL/GLHeaders.h" // convenience header for cross-platform GL includes
#include "Leap/GL/ResourceBase.h"
#include "Leap/GL/Texture2Params.h"
#include "Leap/GL/Texture2PixelData.h"
#include "Leap/GL/Texture2Exception.h"

namespace Leap {
namespace GL {

// This is an invaluable resource: http://www.opengl.org/wiki/Common_Mistakes

// This class wraps creation and use of 2-dimensional GL textures.  While the Texture2Params value
// used to construct Texture2 is persistent (it is stored almost unmodified), the pixel_data is
// not, and is only used to pass in data for texel-loading operations.  The only exceptions that this
// class explicitly throws derive from Leap::GL::Texture2Exception.
class Texture2 : public ResourceBase<Texture2> {
public:
  
  Texture2 (const Texture2 &rhs) = delete;

  // Construct an un-Initialize-d Texture2 which has not acquired any GL (or other) resources.
  // It will be necessary to call Initialize on this object to use it.
  Texture2 ();
  // Convenience constructor that will call Initialize with the given arguments.
  Texture2 (const Texture2Params &params, const Texture2PixelData &pixel_data = Texture2PixelData());
  // Will call Shutdown.
  ~Texture2 ();

  using ResourceBase<Texture2>::IsInitialized;
  using ResourceBase<Texture2>::Initialize;
  using ResourceBase<Texture2>::Shutdown;

  // This method should be called to bind this shader.
  void Bind () const {
    if (!IsInitialized()) {
      throw Texture2Exception("Can't Bind a Texture2 that !IsInitialized().");
    }
    glBindTexture(m_params.Target(), m_texture_name);
  }
  // This method should be called when no shader program should be used.
  void Unbind () const {
    if (!IsInitialized()) {
      throw Texture2Exception("Can't Unbind a Texture2 that !IsInitialized().");
    }
    glBindTexture(m_params.Target(), 0);
  }

  // Returns the assigned GLuint generated by this texture.  Will throw Texture2Exception if IsInitialized returns false.
  GLuint Id () {
    if (!IsInitialized()) {
      throw Texture2Exception("A Texture2 that !IsInitialized() has no Id value.");
    }
    return m_texture_name;
  }
  // Returns the Texture2Params used to construct this texture.  Will throw Texture2Exception if IsInitialized returns false.
  const Texture2Params &Params() const {
    if (!IsInitialized()) {
      throw Texture2Exception("A Texture2 that !IsInitialized() has no Params value.");
    }
    return m_params;
  }

  // Updates the contents of this texture from the specified pixel data, without changing Params.
  void TexSubImage (const Texture2PixelData &pixel_data);
  // Extracts the contents of this texture to the specified pixel data.
  void GetTexImage (Texture2PixelData &pixel_data);
  
private:

  void VerifyPixelDataOrThrow (const Texture2PixelData &pixel_data) const;

  friend class ResourceBase<Texture2>;

  bool IsInitialized_Implementation () const { return m_texture_name != 0; }
  // Construct a Texture2 with the specified parameters and pixel data. The pixel data is only
  // passed into glTexImage2D, and is not stored.  The default value for pixel_data is "empty",
  // which indicates that while the texture memory will be allocated for it, it will not be
  // initialized.  An exception will be thrown upon error.
  void Initialize_Implementation (const Texture2Params &params, const Texture2PixelData &pixel_data = Texture2PixelData());
  // Frees the allocated resources if IsInitialized(), otherwise does nothing (i.e. this method is
  // safe to call multiple times, and has no effect after the resources are freed).
  void Shutdown_Implementation ();

  Texture2Params m_params;
  GLuint m_texture_name;
};

} // end of namespace GL
} // end of namespace Leap
